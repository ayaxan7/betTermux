name: Deploy to Indus App Store

# Trigger the workflow on push to master branch
on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual trigger from GitHub UI

# Set environment variables
env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Java 17 (required for modern Android builds)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Cache Gradle dependencies for faster builds
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Create google-services.json file
    - name: Create google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > app/google-services.json
    
    # Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    # Create local.properties file with API keys
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" >> local.properties
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> local.properties
        echo "oauth_client_id=${{ secrets.OAUTH_CLIENT_ID }}" >> local.properties
        echo "github_client_id=${{ secrets.AUTH_GITHUB_CLIENT_ID }}" >> local.properties
        echo "github_client_secret=${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}" >> local.properties
    
    # Create gradle.properties file with additional properties
    - name: Create gradle.properties
      run: |
        echo "org.gradle.caching=true" >> gradle.properties
        echo "org.gradle.parallel=true" >> gradle.properties
        echo "org.gradle.configuration-cache=true" >> gradle.properties
        echo "org.gradle.daemon=false" >> gradle.properties
        echo "kotlin.incremental=true" >> gradle.properties
        echo "android.nonTransitiveRClass=true" >> gradle.properties
        echo "android.enableR8.fullMode=true" >> gradle.properties
        echo "org.gradle.java.home=$JAVA_HOME" >> gradle.properties
        echo "speedchecker.username=demo" >> gradle.properties
        echo "speedchecker.password=AP85qiz6wYEsCttWU2ZckEWSwJKuA6mSYcizEY" >> gradle.properties
    
    # Decode and create keystore file
    - name: Create keystore
      run: |
        echo "${{ secrets.SIGNING_KEY }}" | base64 -d > keystore.jks
    
    # Run unit tests
    - name: Run tests
      run: ./gradlew testDebugUnitTest --continue
    
    # Build the release AAB
    - name: Build Release AAB
      run: ./gradlew bundleRelease
      env:
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        ALIAS: ${{ secrets.ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    
    # List generated files for debugging
    - name: List build outputs
      run: |
        echo "Checking build outputs..."
        find app/build/outputs -type f -name "*.aab" -o -name "*.apk" | head -20
    
    # Upload AAB as artifact (for manual backup)
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: Release AAB
        path: app/build/outputs/bundle/release/*.aab
        retention-days: 30
    
    # Deploy to Indus App Store
    - name: Upload to Indus App Store
      id: upload-indus-app-store
      uses: yogeshpaliyal/upload-indus-appstore@v0.0.6
      with:
        type: "UPLOAD_AAB"
        apiKey: ${{ secrets.INDUS_API_KEY }}
        packageName: "com.ayaan.mongofsterminal" # Update this to match your actual package name
        aabFile: "app/build/outputs/bundle/release/*.aab"
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        keystoreAlias: ${{ secrets.ALIAS }}
        keystorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    
    # Print upload result
    - name: Print Upload Result
      if: always()
      run: |
        echo "Upload Status: ${{ steps.upload-indus-app-store.outcome }}"
        if [ "${{ steps.upload-indus-app-store.outcome }}" = "success" ]; then
          echo "✅ Successfully uploaded to Indus App Store!"
        else
          echo "❌ Upload failed. Check the logs above for details."
        fi
    
    # Clean up sensitive files
    - name: Cleanup
      if: always()
      run: |
        rm -f keystore.jks
        rm -f local.properties

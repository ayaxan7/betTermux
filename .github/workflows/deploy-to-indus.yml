name: Deploy to Indus App Store

# Trigger the workflow on push to master branch
on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual trigger from GitHub UI

# Set environment variables
env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Java 17 (required for modern Android builds)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Cache Gradle dependencies for faster builds
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Create google-services.json file
    - name: Create google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > app/google-services.json
    
    # Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    # Create local.properties file with API keys
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" >> local.properties
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> local.properties
        echo "oauth_client_id=${{ secrets.OAUTH_CLIENT_ID }}" >> local.properties
        echo "github_client_id=${{ secrets.AUTH_GITHUB_CLIENT_ID }}" >> local.properties
        echo "github_client_secret=${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}" >> local.properties
    
    # Create gradle.properties file with additional properties
    - name: Create gradle.properties
      run: |
        echo "org.gradle.caching=true" >> gradle.properties
        echo "org.gradle.parallel=true" >> gradle.properties
        echo "org.gradle.configuration-cache=true" >> gradle.properties
        echo "org.gradle.daemon=false" >> gradle.properties
        echo "kotlin.incremental=true" >> gradle.properties
        echo "android.nonTransitiveRClass=true" >> gradle.properties
        echo "android.enableR8.fullMode=true" >> gradle.properties
        echo "org.gradle.java.home=$JAVA_HOME" >> gradle.properties
        echo "speedchecker.username=demo" >> gradle.properties
        echo "speedchecker.password=AP85qiz6wYEsCttWU2ZckEWSwJKuA6mSYcizEY" >> gradle.properties
    
    # Decode and create keystore file
    - name: Create keystore
      run: |
        echo "${{ secrets.SIGNING_KEY }}" | base64 -d > keystore.jks
    
    # Build the release AAB
    - name: Build Release AAB
      run: ./gradlew bundleRelease
      env:
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        ALIAS: ${{ secrets.ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    
    # Verify package name in AAB (debugging step)
    - name: Verify AAB package name
      run: |
        echo "Checking AAB contents..."
        if command -v aapt2 &> /dev/null; then
          aapt2 dump badging app/build/outputs/bundle/release/app-release.aab | grep "package"
        else
          echo "aapt2 not available, skipping package verification"
        fi
    
    # List generated files for debugging
    - name: List build outputs
      run: |
        echo "Checking build outputs..."
        find app/build/outputs -type f -name "*.aab" -o -name "*.apk" | head -20
        ls -la app/build/outputs/bundle/release/
    
    # Upload AAB as artifact (for manual backup)
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: Release AAB
        path: app/build/outputs/bundle/release/*.aab
        retention-days: 30
    
    # Debug API connectivity
    - name: Test Indus API connectivity
      run: |
        echo "Testing Indus API connectivity..."
        curl -I "https://developer-api.indusappstore.com" || echo "API endpoint not reachable"
        echo "API Key (masked): ${INDUS_API_KEY:0:10}..."
      env:
        INDUS_API_KEY: ${{ secrets.INDUS_API_KEY }}
    
    # Try alternative upload method first
    - name: Upload to Indus App Store (Alternative Method)
      id: upload-indus-alternative
      run: |
        AAB_FILE="app/build/outputs/bundle/release/app-release.aab"
        KEYSTORE_FILE="keystore.jks"
        
        echo "Attempting direct API upload..."
        
        response=$(curl -s -w "%{http_code}" -o response.json -X POST \
          "https://developer-api.indusappstore.com/apis/indus-developerdashboard-service/devtools/aab/upload" \
          -H "Authorization: Bearer ${{ secrets.INDUS_API_KEY }}" \
          -F "aabFile=@${AAB_FILE}" \
          -F "packageName=com.ayaan.mongofsterminal" \
          -F "signingKey=@${KEYSTORE_FILE}" \
          -F "keystoreAlias=${{ secrets.ALIAS }}" \
          -F "keystorePassword=${{ secrets.KEY_STORE_PASSWORD }}" \
          -F "keyPassword=${{ secrets.KEY_PASSWORD }}")

        echo "HTTP Response Code: $response"
        echo "Response Body:"
        cat response.json

        if [ "$response" -ne 200 ]; then
          echo "❌ Upload failed with status $response"
          exit 1
        fi
    
    # Deploy to Indus App Store (Original Method)
    - name: Upload to Indus App Store (Original Method)
      id: upload-indus-app-store
      if: steps.upload-indus-alternative.outcome == 'failure'
      uses: yogeshpaliyal/upload-indus-appstore@v0.0.6
      with:
        type: "UPLOAD_AAB"
        apiKey: ${{ secrets.INDUS_API_KEY }}
        packageName: "com.ayaan.mongofsterminal"
        aabFile: "app/build/outputs/bundle/release/app-release.aab"
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        keystoreAlias: ${{ secrets.ALIAS }}
        keystorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    
    # Try with newer version of the action
    - name: Upload to Indus App Store (Latest Version)
      id: upload-indus-latest
      if: steps.upload-indus-app-store.outcome == 'failure'
      uses: yogeshpaliyal/upload-indus-appstore@main
      with:
        type: "UPLOAD_AAB"
        apiKey: ${{ secrets.INDUS_API_KEY }}
        packageName: "com.ayaan.mongofsterminal"
        aabFile: "app/build/outputs/bundle/release/app-release.aab"
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        keystoreAlias: ${{ secrets.ALIAS }}
        keystorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    
    # Print comprehensive upload result
    - name: Print Upload Result
      if: always()
      run: |
        echo "=== UPLOAD RESULTS SUMMARY ==="
        echo "Alternative Upload: ${{ steps.upload-indus-alternative.outcome }}"
        echo "Original Action: ${{ steps.upload-indus-app-store.outcome }}"
        echo "Latest Action: ${{ steps.upload-indus-latest.outcome }}"
        
        if [[ "${{ steps.upload-indus-alternative.outcome }}" == "success" || 
              "${{ steps.upload-indus-app-store.outcome }}" == "success" || 
              "${{ steps.upload-indus-latest.outcome }}" == "success" ]]; then
          echo "✅ Successfully uploaded to Indus App Store!"
        else
          echo "❌ All upload methods failed."
          echo ""
          echo "Common issues to check:"
          echo "1. Verify INDUS_API_KEY is valid and has upload permissions"
          echo "2. Confirm package name 'com.ayaan.mongofsterminal' exists in Indus console"
          echo "3. Check if this is first upload vs update (different endpoints)"
          echo "4. Verify keystore credentials match exactly"
          echo ""
          echo "AAB file was built successfully and is available as artifact for manual upload."
        fi
    
    # Clean up sensitive files
    - name: Cleanup
      if: always()
      run: |
        rm -f keystore.jks
        rm -f local.properties
